set PATH [lindex $argv 0]

#The name of the benchmark
set benchmark [lindex $argv 1]

#List of master ports
set list_master_ports [lindex $argv 2]

#Frequency factor, e.g. 5, 4.5, 5.5, 6, etc.
set PL_Freq_factor [lindex $argv 3]

set find_max_freq [lindex $argv 4]

set device_name [lindex $argv 5]

#DDR PLL is chosen as the clock source of the design
set DDR_Freq 533.33

set PL_Freq [expr $DDR_Freq / $PL_Freq_factor]

puts $PL_Freq_factor

set_msg_config -id "BD 41-237" -limit 1000

set project_name $benchmark

puts $list_master_ports
set total_ports [llength $list_master_ports]

append project_name ""
puts $project_name
puts $total_ports

set multi_levels 0

if {$total_ports > 64} {
	set multi_levels 1
}

set first_run 1

#Create project
file delete -force $PATH/vivado/${project_name}

#Zynq 7045
#create_project ${project_name} $PATH/vivado/${project_name} -part xc7z045ffg900-1
#Zynq 7020
#create_project ${project_name} $PATH/vivado/${project_name} -part xc7z020clg484-1

create_project ${project_name} $PATH/vivado/${project_name} -part $device_name

#Set up IP repo
file delete -force $PATH/vivado/ip_${project_name}

file mkdir $PATH/vivado/ip_${project_name}
set_property ip_repo_paths $PATH/vivado/ip_${project_name} [current_fileset]
update_ip_catalog
update_ip_catalog -add_ip $PATH/hls/solution1/impl/ip/xilinx_com_hls_fcuda_1_0.zip -repo_path $PATH/vivado/ip_${project_name}

#Create block design
create_bd_design "design_1"

#Add Zynq PS IP core
startgroup
create_bd_cell -type ip -vlnv xilinx.com:ip:processing_system7 processing_system7_0
endgroup

#Automation of connecting to DDR
apply_bd_automation -rule xilinx.com:bd_rule:processing_system7 -config {make_external "FIXED_IO, DDR" Master "Disable" Slave "Disable" }  [get_bd_cells processing_system7_0]


#Set ARM's Frequency, Enable HP port, Remove unused peripherals, UART is enabled for serial port comm.
set_property -dict [list CONFIG.PCW_APU_PERIPHERAL_FREQMHZ {800} CONFIG.PCW_USE_S_AXI_HP0 {1} CONFIG.PCW_QSPI_PERIPHERAL_ENABLE {0} CONFIG.PCW_ENET0_PERIPHERAL_ENABLE {0} CONFIG.PCW_SD0_PERIPHERAL_ENABLE {0} CONFIG.PCW_UART1_PERIPHERAL_ENABLE {1} CONFIG.PCW_TTC0_PERIPHERAL_ENABLE {0} CONFIG.PCW_USB0_PERIPHERAL_ENABLE {0} CONFIG.PCW_I2C0_PERIPHERAL_ENABLE {0} CONFIG.PCW_GPIO_MIO_GPIO_ENABLE {0} CONFIG.PCW_FCLK0_PERIPHERAL_CLKSRC {DDR PLL}] [get_bd_cells processing_system7_0]

#RAM of the target device is 1G
#set_property CONFIG.PCW_DDR_RAM_HIGHADDR 0x3FFFFFFF [get_bd_cells processing_system7_0]

set hp1_enable 0
set hp2_enable 0
set hp3_enable 0

#Enable HP1 port if we have more than one port
if {$total_ports > 1} {
  set_property -dict [list CONFIG.PCW_USE_S_AXI_HP1 {1}] [get_bd_cells processing_system7_0]
  set hp1_enable 1
}

#Enable HP2 port if we have more than two port
if {$total_ports > 2} {
  set_property -dict [list CONFIG.PCW_USE_S_AXI_HP2 {1}] [get_bd_cells processing_system7_0]
  set hp2_enable 1
}

#Enable HP3 port if we have more than three port
if {$total_ports > 3} {
  set_property -dict [list CONFIG.PCW_USE_S_AXI_HP3 {1}] [get_bd_cells processing_system7_0]
  set hp3_enable 1
}


#Add the custom IP core generated by Vivado HLS
create_bd_cell -type ip -vlnv xilinx.com:hls:fcuda:1.0 fcuda_0

create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0


set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_0]
#set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_0]

connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP0]

set num_axi_interconn 1

if {$hp1_enable == 1} {
  create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_${num_axi_interconn}
  set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_${num_axi_interconn}]
  #set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_${num_axi_interconn}]

  connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_${num_axi_interconn}/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP1]
  set num_axi_interconn [expr ${num_axi_interconn} + 1]
}

if {$hp2_enable == 1} {
  create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_${num_axi_interconn}
  set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_${num_axi_interconn}]
  #set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_${num_axi_interconn}]

  connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_${num_axi_interconn}/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP2]
  set num_axi_interconn [expr ${num_axi_interconn} + 1]
}

if {$hp3_enable == 1} {
  create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_${num_axi_interconn}
  set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_${num_axi_interconn}]
  #set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_${num_axi_interconn}]

  connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_${num_axi_interconn}/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP3]
  set num_axi_interconn [expr ${num_axi_interconn} + 1]
}

set num_port(0) 0
set num_port(1) 0
set num_port(2) 0
set num_port(3) 0

set num_interconn(0) 0
set num_interconn(1) 0
set num_interconn(2) 0
set num_interconn(3) 0

if {$multi_levels == 1} {
  set id 1
  
  set total_ports1 $total_ports
  while {$total_ports1 > 0} {
    if {$total_ports1 > 64} {
      set num_port(0) 16
      if {$total_ports1 > 65} {
              set num_port(1) 16
      }
      if {$total_ports1 > 66} {
              set num_port(2) 16
      }
      if {$total_ports1 > 67} {
              set num_port(3) 16
      }
      
      incr num_interconn(0)
      incr num_interconn(1)
      incr num_interconn(2)
      incr num_interconn(3)
    } else {
      set div [expr $total_ports1 / 4]
      set rem [expr $total_ports1 % 4]
      set num_port(0) $div
      set num_port(1) $div
      set num_port(2) $div
      set num_port(3) $div

      if {$div > 0} {
        incr num_interconn(0)
        incr num_interconn(1)
        incr num_interconn(2)
        incr num_interconn(3)
      }

      if {$rem > 0} {
        incr num_port(0)
        incr rem -1
        if {$div == 0}
          incr num_interconn(0)
      }
      if {$rem > 0} {
        incr num_port(1)
        incr rem -1
        if {$div == 0}
          incr num_interconn(1)
      }
      if {$rem > 0} {
        incr num_port(2)
        incr rem -1
        if {$div == 0}
          incr num_interconn(2)
      }
      if {$rem > 0} {
        incr num_port(3)
        incr rem -1
        if {$div == 0}
          incr num_interconn(3)
      }
    }

    for {set i 0} {$i < 4} {incr i} {
      if {$num_port($i) > 0} {
        puts $num_axi_interconn
        startgroup
        create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_${num_axi_interconn}
        set_property -dict [list CONFIG.NUM_SI $num_port($i) CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_${num_axi_interconn}]
        set_property -dict [list CONFIG.NUM_SI $num_interconn($i) CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_$i]
        if {$num_interconn($i) >= 11} {
          connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_$num_axi_interconn/M00_AXI] [get_bd_intf_pins axi_interconnect_$i/S[expr $num_interconn($i) - 1]_AXI]
        } else {
          connect_bd_intf_net -boundary_type upper [get_bd_intf_pins axi_interconnect_$num_axi_interconn/M00_AXI] [get_bd_intf_pins axi_interconnect_$i/S0[expr $num_interconn($i) - 1]_AXI]
        }
        endgroup
        incr num_axi_interconn
      }     
    }
    set total_ports1 [expr $total_ports1 - 64] 
    puts $total_ports1
  }
}

save_bd_design

set HP "/processing_system7_0/S_AXI_HP"

set total_axi_interconn [expr $num_interconn(0) + $num_interconn(1) + $num_interconn(2) + $num_interconn(3) + 4]
puts $total_axi_interconn

set port_counter 1
set axi_interconn_counter 4
set axi_in_0_id 0
set level 1
#Connect the Master AXI ports of the IP to the HP slave port of Zynq PS
foreach master_port $list_master_ports {

  #Connect the Slave AXI4Lites port of the IP to the GP0 master port of Zynq PS
  apply_bd_automation -rule xilinx.com:bd_rule:axi4 -config {Master "/processing_system7_0/M_AXI_GP0" Clk "Auto" }  [get_bd_intf_pins fcuda_0/S_AXI_AXI4LITES]

  set HP ""
  set HP_Port_id [expr ($port_counter - 1) % 4]
  set AXI_Interconn_Port_id  [expr ($port_counter - 1) / 4]

  append HP "/processing_system7_0/S_AXI_HP" ${HP_Port_id}
  puts $HP
  
  if {$port_counter > 64} {
    #incr axi_in_0_id
    incr level
    set axi_in_0_id 0
    set port_counter [expr $port_counter - 64]
  }
  
  puts $port_counter  
  puts $level
  puts $axi_in_0_id

  if {$multi_levels == 1} {
    if {$num_interconn($HP_Port_id) > 1} {

      if {$axi_in_0_id >= 10} {
        set axi_in_0_name $axi_in_0_id
      } else {
        set axi_in_0_name 0$axi_in_0_id
      }

      set HP ""
      #append HP "/axi_interconnect_" $HP_Port_id "/xbar/S" ${axi_in_0_name} "_AXI"
      set axi_interconn_id [expr $HP_Port_id + 4 * $level]
      append HP "/axi_interconnect_" $axi_interconn_id "/S" ${axi_in_0_name} "_AXI"
      connect_bd_net [get_bd_pins axi_interconnect_${axi_interconn_id}/S${axi_in_0_name}_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
      connect_bd_net [get_bd_pins axi_interconnect_${axi_interconn_id}/S${axi_in_0_name}_ARESETN] [get_bd_pins rst_processing_system7_0_50M/peripheral_aresetn]
      if {$HP_Port_id == 3} {
        incr axi_in_0_id
      }
      puts $HP
    }
  }

  if {$AXI_Interconn_Port_id >= 10} {
    set AXI_Interconn_Port_id_name $AXI_Interconn_Port_id
  } else {
    set AXI_Interconn_Port_id_name 0$AXI_Interconn_Port_id
  }

  #set_property -dict [list CONFIG.S${AXI_Interconn_Port_id_name}_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_${HP_Port_id}]

  set_property -dict [list CONFIG.C_${master_port}_DATA_WIDTH {64}] [get_bd_cells fcuda_0]
  if {$multi_levels == 0} {
    apply_bd_automation -rule xilinx.com:bd_rule:axi4 -config Slave -config $HP -config {Clk "Auto"}  [get_bd_intf_pins fcuda_0/$master_port]
  } else {
   connect_bd_intf_net [get_bd_intf_pins fcuda_0/$master_port] [get_bd_intf_pins $HP]
  }

  save_bd_design
  incr port_counter
}

save_bd_design

if {$multi_levels == 1} {
  connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins processing_system7_0/S_AXI_HP0_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]

  if {$hp1_enable == 1} {
    connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins processing_system7_0/S_AXI_HP1_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
  }

  if {$hp2_enable == 1} {
    connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins processing_system7_0/S_AXI_HP2_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
  }

  if {$hp3_enable == 1} {
    connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins processing_system7_0/S_AXI_HP3_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
  }

  for {set i 0} {$i < $total_axi_interconn} {incr i} {
    connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins axi_interconnect_$i/ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
    connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins axi_interconnect_$i/M00_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
    connect_bd_net -net [get_bd_nets rst_processing_system7_0_50M_interconnect_aresetn] [get_bd_pins axi_interconnect_$i/ARESETN] [get_bd_pins rst_processing_system7_0_50M/interconnect_aresetn]
    connect_bd_net -net [get_bd_nets rst_processing_system7_0_50M_peripheral_aresetn] [get_bd_pins axi_interconnect_$i/M00_ARESETN] [get_bd_pins rst_processing_system7_0_50M/peripheral_aresetn]
  }

  for {set i 0} {$i < 4} {incr i} {
    if {$num_interconn($i) > 1} {
      for {set j 0} {$j < $num_interconn($i)} {incr j} {
        if {$j >= 10} {
          set j1 $j
        } else {
          set j1 0$j
        }

        connect_bd_net -net [get_bd_nets processing_system7_0_FCLK_CLK0] [get_bd_pins axi_interconnect_$i/S${j1}_ACLK] [get_bd_pins processing_system7_0/FCLK_CLK0]
        connect_bd_net -net [get_bd_nets rst_processing_system7_0_50M_peripheral_aresetn] [get_bd_pins axi_interconnect_$i/S${j1}_ARESETN] [get_bd_pins rst_processing_system7_0_50M/peripheral_aresetn]
      }
    }
  }
}

file delete -force $PATH/vivado/${project_name}_best
file delete -force $PATH/vivado/deleted
#Iterative Synthesis & PnR to find maximum achievable frequency
while {1} {
  set_property -dict [list CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ $PL_Freq] [get_bd_cells processing_system7_0]

  save_bd_design
  validate_bd_design

  #Generate output design
  generate_target all [get_files  $PATH/vivado/${project_name}/${project_name}.srcs/sources_1/bd/design_1/design_1.bd]

  #Create HDL wrapper
  make_wrapper -files [get_files $PATH/vivado/${project_name}/${project_name}.srcs/sources_1/bd/design_1/design_1.bd] -top
  add_files -norecurse $PATH/vivado/${project_name}/${project_name}.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.v
  update_compile_order -fileset sources_1
  update_compile_order -fileset sim_1

  #exit

  #Run synthesis, implementation, and write bitstream
  reset_run synth_1
  launch_runs impl_1 -to_step write_bitstream
  wait_on_run synth_1
  wait_on_run impl_1

  set fd [open $PATH/vivado/${project_name}/${project_name}.runs/impl_1/design_1_wrapper_timing_summary_routed.rpt r]
  set data [read $fd]
  close $fd
  puts [catch {tell $fd}]
  while {[catch {tell $fd}] == 0} {
          puts "waiting file to be closed."
  };

  set met_timing 0
  set lines [split $data \n]
  foreach line $lines {
    if {[regexp {are\s+met} $line ]} {
      puts $line
      set met_timing 1
      break
    } elseif {[regexp {are\s+not\s+met} $line ]} {
      puts $line
      break
    }
  }

  puts $met_timing

  if {$find_max_freq == 0} {
    break
  }

  if {$first_run == 1} {
    set first_met $met_timing
    set first_run 0
  }

  puts $first_met

  if {$met_timing == 1} {
    if {$first_met == 0} {
      break
    } else {
      file delete -force $PATH/vivado/${project_name}_best
      file copy -force $PATH/vivado/${project_name} $PATH/vivado/${project_name}_best
      set PL_Freq_factor [expr $PL_Freq_factor - 0.5]
      set PL_Freq [expr $DDR_Freq / $PL_Freq_factor]
      puts $PL_Freq
    }
  } else {
    if {$first_met == 1} {
      file rename -force $PATH/vivado/${project_name} $PATH/vivado/deleted
      file rename -force $PATH/vivado/${project_name}_best $PATH/vivado/${project_name}
      break
    } else {
      set PL_Freq_factor [expr $PL_Freq_factor + 0.5]
      set PL_Freq [expr $DDR_Freq / $PL_Freq_factor]
      puts $PL_Freq
    }
  }
}

open_run impl_1
file mkdir $PATH/sdk
file copy -force $PATH/vivado/${project_name}/${project_name}.runs/impl_1/design_1_wrapper.sysdef $PATH/sdk/${project_name}.hdf
exit
