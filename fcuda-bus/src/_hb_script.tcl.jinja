package require math

set project_name [lindex $argv 0]

set top_level_function [lindex $argv 1]

set total_num_cores [lindex $argv 2]
set num_tiles [lindex $argv 3]

#0: no sim, 1: sim with MIG + DDR3
set sim_flow [lindex $argv 4]
#0: no synthesis, 1: synthesis + P & R
set syn_flow [lindex $$argv 5]

set is_already_run [lindex $argv 6]

set prj_path ./${project_name}
set ppFile_path ./prepareFile_709

set rptDir ${prj_path}/report
file mkdir $rptDir

if {${is_already_run} == 1} {
open_project ${prj_path}/${project_name}.xpr
} else {
create_project -force ${project_name} ${prj_path} -part {{device_id}}

set level 1
if {$num_tiles > 1} {
    set level 2
}

add_files -fileset constrs_1 -norecurse -force ./prepareFile_709/const.xdc

set Repo ./hls/solution1/impl/ip
set fcuda ${top_level_function}

if {[catch {glob ./prj_files/*.hex} check_hex]} {
  puts $check_hex
} else {
  foreach file [glob ./prj_files/*.hex] {
    add_files $file
    set_property file_type {Memory Initialization Files} [get_files $file]
  }
}

create_bd_design "design_1"
create_bd_cell -type ip -vlnv xilinx.com:ip:mig_7series mig_7series_0

file copy $ppFile_path/mig_a.prj $prj_path/${project_name}.srcs/sources_1/bd/design_1/ip/design_1_mig_7series_0_0/

set_property -name {CONFIG.XML_INPUT_FILE} -value  {mig_a.prj} -objects [get_bd_cells mig_7series_0]
set_property -name {CONFIG.RESET_BOARD_INTERFACE} -value  {Custom} -objects [get_bd_cells mig_7series_0]
set_property -name {CONFIG.MIG_DONT_TOUCH_PARAM} -value  {Custom} -objects [get_bd_cells mig_7series_0]
set_property -name {CONFIG.BOARD_MIG_PARAM} -value  {Custom} -objects [get_bd_cells mig_7series_0]

create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0
if {$level == 1} {
set_property -dict [list CONFIG.NUM_SI ${total_num_cores} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_0] 
}
if {$level == 2} {
set_property -dict [list CONFIG.NUM_SI ${num_tiles} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_0] 
}

# connect interconnect with MIG
connect_bd_intf_net [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins mig_7series_0/S_AXI]

# instantiate proc_sys_reset
create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0
create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_1
set_property -dict [list CONFIG.C_AUX_RESET_HIGH.VALUE_SRC USER] [get_bd_cells proc_sys_reset_0]
set_property -dict [list CONFIG.C_AUX_RESET_HIGH {0}] [get_bd_cells proc_sys_reset_0]

set_property ip_repo_paths $Repo [current_fileset]
update_ip_catalog
for {set x 0} {$x < ${total_num_cores}} {incr x} {
    create_bd_cell -type ip -vlnv xilinx.com:hls:$fcuda:1.0 fcuda_core_$x
    set_property -dict [list CONFIG.C_M_AXI_MEMPORT_P0_DATA_WIDTH {64}] [get_bd_cells fcuda_core_$x]
}
# wire connection

# make out_connection
create_bd_intf_port -mode Master -vlnv xilinx.com:interface:ddrx_rtl:1.0 DDR3
connect_bd_intf_net [get_bd_intf_pins mig_7series_0/DDR3] [get_bd_intf_ports DDR3]
create_bd_port -dir I -type clk sys_clk_i
connect_bd_net [get_bd_pins /mig_7series_0/sys_clk_i] [get_bd_ports sys_clk_i]
create_bd_port -dir I -type clk clk_ref_i
connect_bd_net [get_bd_pins /mig_7series_0/clk_ref_i] [get_bd_ports clk_ref_i]
create_bd_port -dir I -type rst sys_rst
connect_bd_net [get_bd_pins /mig_7series_0/sys_rst] [get_bd_ports sys_rst]
create_bd_port -dir O init_calib_complete
connect_bd_net [get_bd_pins /mig_7series_0/init_calib_complete] [get_bd_ports init_calib_complete]

# wire connection
create_bd_port -dir I -type clk aclk
# This option will be overwritten by the *.xdc constraint file 
set_property CONFIG.FREQ_HZ 100000000 [ get_bd_ports aclk]
connect_bd_net [get_bd_pins proc_sys_reset_0/slowest_sync_clk] [get_bd_ports aclk] [get_bd_pins axi_interconnect_0/ACLK]
connect_bd_net [get_bd_pins mig_7series_0/ui_clk_sync_rst] [get_bd_pins proc_sys_reset_0/ext_reset_in]
connect_bd_net [get_bd_pins proc_sys_reset_0/interconnect_aresetn] [get_bd_pins axi_interconnect_0/ARESETN]
connect_bd_net [get_bd_pins mig_7series_0/mmcm_locked] [get_bd_pins proc_sys_reset_0/dcm_locked]

#make a second control IP
set_property -dict [list CONFIG.C_AUX_RESET_HIGH.VALUE_SRC USER] [get_bd_cells proc_sys_reset_1]
set_property -dict [list CONFIG.C_AUX_RESET_HIGH {0}] [get_bd_cells proc_sys_reset_1]
connect_bd_net [get_bd_pins mig_7series_0/ui_clk] [get_bd_pins proc_sys_reset_1/slowest_sync_clk]
connect_bd_net -net [get_bd_nets mig_7series_0_ui_clk_sync_rst] [get_bd_pins proc_sys_reset_1/ext_reset_in] [get_bd_pins mig_7series_0/ui_clk_sync_rst]
connect_bd_net [get_bd_pins proc_sys_reset_1/interconnect_aresetn] [get_bd_pins axi_interconnect_0/M00_ARESETN]
connect_bd_net [get_bd_pins proc_sys_reset_1/peripheral_aresetn] [get_bd_pins mig_7series_0/aresetn]
connect_bd_net [get_bd_pins mig_7series_0/ui_clk] [get_bd_pins axi_interconnect_0/M00_ACLK]

save_bd_design

# wire connection for each core

# clk connection for each AXI interface and core aclk
# for loop
if {$level == 1} {
    for {set x 0} {$x < [expr {min(10, ${total_num_cores})}]} {incr x} {
        connect_bd_net [get_bd_pins /fcuda_core_$x/aclk] [get_bd_ports aclk] [get_bd_pins axi_interconnect_0/S0$x\_ACLK]
        connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/S0$x\_ARESETN] [get_bd_pins fcuda_core_$x/aresetn]
        connect_bd_intf_net [get_bd_intf_pins fcuda_core_$x/M_AXI_MEMPORT_P0] [get_bd_intf_pins axi_interconnect_0/S0$x\_AXI]

        set_property -dict [list CONFIG.S0$x\_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_0]
    }
    if {${total_num_cores} > 10} {
        for {set x 10} {$x < ${total_num_cores}} {incr x} {
            connect_bd_net [get_bd_pins /fcuda_core_$x/aclk] [get_bd_ports aclk] [get_bd_pins axi_interconnect_0/S$x\_ACLK]
            connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/S$x\_ARESETN] [get_bd_pins fcuda_core_$x/aresetn]
            connect_bd_intf_net [get_bd_intf_pins fcuda_core_$x/M_AXI_MEMPORT_P0] [get_bd_intf_pins axi_interconnect_0/S$x\_AXI]

            set_property -dict [list CONFIG.S$x\_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_0]
        }
    }
}

if {$level == 2} {
for {set x 0} {$x < ${num_tiles}} {incr x} {
        create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_tile_$x
	set padding 0
        if {$x < [expr {${total_num_cores} % ${num_tiles}}]} {
	    set padding 1	
	}
        set_property -dict [list CONFIG.NUM_SI [expr {${total_num_cores} / ${num_tiles} + $padding}] CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_tile_$x]

	connect_bd_net -net [get_bd_nets proc_sys_reset_0_interconnect_aresetn] [get_bd_pins axi_interconnect_tile_$x/M00_ARESETN] [get_bd_pins proc_sys_reset_0/interconnect_aresetn] [get_bd_pins axi_interconnect_tile_$x/ARESETN]

	if {$x < 10} {
	    connect_bd_intf_net [get_bd_intf_pins axi_interconnect_tile_$x/M00_AXI] [get_bd_intf_pins axi_interconnect_0/S0$x\_AXI]
	    connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/S0$x\_ARESETN]
	    connect_bd_net [get_bd_ports aclk] [get_bd_pins axi_interconnect_tile_$x/ACLK] [get_bd_pins axi_interconnect_tile_$x/M00_ACLK] [get_bd_pins axi_interconnect_0/S0$x\_ACLK]
	} else {
	    connect_bd_intf_net [get_bd_intf_pins axi_interconnect_tile_$x/M00_AXI] [get_bd_intf_pins axi_interconnect_0/S$x\_AXI]
	    connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/S$x\_ARESETN]
	    connect_bd_net [get_bd_ports aclk] [get_bd_pins axi_interconnect_tile_$x/ACLK] [get_bd_pins axi_interconnect_tile_$x/M00_ACLK] [get_bd_pins axi_interconnect_0/S$x\_ACLK]
	}
    }
    for {set x 0} {$x < ${total_num_cores}} {incr x} {
        set curr [expr {$x % ${num_tiles}}] 
        set pos [expr {$x / ${num_tiles}}]
        if {$pos < 10} {
            set_property -dict [list CONFIG.S0${pos}_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_tile_$curr]

            connect_bd_net [get_bd_pins /fcuda_core_$x/aclk] [get_bd_ports aclk] [get_bd_pins axi_interconnect_tile_$curr/S0$pos\_ACLK]
            connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_tile_$curr/S0$pos\_ARESETN] [get_bd_pins fcuda_core_$x/aresetn]
            connect_bd_intf_net [get_bd_intf_pins fcuda_core_$x/M_AXI_MEMPORT_P0] [get_bd_intf_pins axi_interconnect_tile_$curr/S0$pos\_AXI]
	}
	if {$pos >= 10} {
            set_property -dict [list CONFIG.S${pos}_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_tile_$curr]

	    connect_bd_net [get_bd_pins /fcuda_core_$x/aclk] [get_bd_ports aclk] [get_bd_pins axi_interconnect_tile_$curr/S$pos\_ACLK]
            connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_tile_$curr/S$pos\_ARESETN] [get_bd_pins fcuda_core_$x/aresetn]
            connect_bd_intf_net [get_bd_intf_pins fcuda_core_$x/M_AXI_MEMPORT_P0] [get_bd_intf_pins axi_interconnect_tile_$curr/S$pos\_AXI]
	}
        set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_tile_$curr]
    }
}

set_property -dict [list CONFIG.STRATEGY {2} CONFIG.M00_HAS_DATA_FIFO {2}] [get_bd_cells axi_interconnect_0]

save_bd_design

# make outside port for argument
{%- for x in scalar_values %}
create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 {{x.name}}
set_property -dict [list CONFIG.CONST_WIDTH {32} CONFIG.CONST_VAL {{x.value}}] [get_bd_cells {{x.name}}]
for {set x 0} {$x < ${total_num_cores}} {incr x} {
  connect_bd_net [get_bd_pins {{x.name}}/dout] [get_bd_pins fcuda_core_$x/{{x.name}}]
}
{%- endfor %}

create_bd_port -dir I ap_start

create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 num_cores
set_property -dict [list CONFIG.CONST_WIDTH {32} CONFIG.CONST_VAL ${total_num_cores}] [get_bd_cells num_cores]
# connect the port for each core to the port
for {set x 0} {$x < ${total_num_cores}} {incr x} {
  connect_bd_net [get_bd_pins num_cores/dout] [get_bd_pins fcuda_core_$x/num_cores]
  create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 core_id\_$x
  set_property -dict [list CONFIG.CONST_WIDTH {32} CONFIG.CONST_VAL $x] [get_bd_cells core_id\_$x]
  connect_bd_net [get_bd_pins core_id\_$x/dout] [get_bd_pins fcuda_core_$x/core_id]

  connect_bd_net [get_bd_pins /fcuda_core_$x/ap_start] [get_bd_ports ap_start]
}


create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 constant_one
set_property -dict [list CONFIG.CONST_WIDTH {32} CONFIG.CONST_VAL 1] [get_bd_cells constant_one]
create_bd_port -dir O ap_ready
create_bd_port -dir O ap_done
create_bd_port -dir O ap_idle

for {set x 0} {$x < ${total_num_cores}} {incr x} {
  # ap_ready signals
  create_bd_cell -type ip -vlnv xilinx.com:ip:c_shift_ram:12.0 ap_ready_reg_$x

  set_property -dict [list CONFIG.Width.VALUE_SRC USER] [get_bd_cells ap_ready_reg_$x]
  set_property -dict [list CONFIG.Width {1} CONFIG.Depth {1} CONFIG.DefaultData {0} CONFIG.AsyncInitVal {0} CONFIG.SyncInitVal {0} CONFIG.ShiftRegType {Fixed_Length} CONFIG.CE {true} CONFIG.SSET {false} CONFIG.SCLR {false} CONFIG.SINIT {false}] [get_bd_cells ap_ready_reg_$x]
  
  connect_bd_net [get_bd_pins ap_ready_reg_$x/CLK] [get_bd_ports aclk]
  connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_ready_reg_$x/D]
  connect_bd_net [get_bd_pins /fcuda_core_$x/ap_ready] [get_bd_pins ap_ready_reg_$x/CE]

  create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 ap_ready_and_$x
  set_property -dict [list CONFIG.C_SIZE {1} CONFIG.C_OPERATION {and}] [get_bd_cells ap_ready_and_$x]

  connect_bd_net [get_bd_pins ap_ready_reg_$x/Q] [get_bd_pins ap_ready_and_$x/Op1]
  if {$x == 0} {
    connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_ready_and_$x/Op2]
  } else {
    set previous_reg [expr $x - 1]
    connect_bd_net [get_bd_pins ap_ready_and_${previous_reg}/Res] [get_bd_pins ap_ready_and_$x/Op2]
  }

  # ap_idle signals
  create_bd_cell -type ip -vlnv xilinx.com:ip:c_shift_ram:12.0 ap_idle_reg_$x

  set_property -dict [list CONFIG.Width.VALUE_SRC USER] [get_bd_cells ap_idle_reg_$x]
  set_property -dict [list CONFIG.Width {1} CONFIG.Depth {1} CONFIG.DefaultData {0} CONFIG.AsyncInitVal {0} CONFIG.SyncInitVal {0} CONFIG.ShiftRegType {Fixed_Length} CONFIG.CE {true} CONFIG.SSET {false} CONFIG.SCLR {false} CONFIG.SINIT {false}] [get_bd_cells ap_idle_reg_$x]
 
  connect_bd_net [get_bd_pins ap_idle_reg_$x/CLK] [get_bd_ports aclk]
  connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_idle_reg_$x/D]
  connect_bd_net [get_bd_pins /fcuda_core_$x/ap_idle] [get_bd_pins ap_idle_reg_$x/CE]

  create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 ap_idle_and_$x
  set_property -dict [list CONFIG.C_SIZE {1} CONFIG.C_OPERATION {and}] [get_bd_cells ap_idle_and_$x]

  connect_bd_net [get_bd_pins ap_idle_reg_$x/Q] [get_bd_pins ap_idle_and_$x/Op1]
  if {$x == 0} {
    connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_idle_and_$x/Op2]
  } else {
    set previous_reg [expr $x - 1]
    connect_bd_net [get_bd_pins ap_idle_and_${previous_reg}/Res] [get_bd_pins ap_idle_and_$x/Op2]
  }

  # ap_done signals
  create_bd_cell -type ip -vlnv xilinx.com:ip:c_shift_ram:12.0 ap_done_reg_$x

  set_property -dict [list CONFIG.Width.VALUE_SRC USER] [get_bd_cells ap_done_reg_$x]
  set_property -dict [list CONFIG.Width {1} CONFIG.Depth {1} CONFIG.DefaultData {0} CONFIG.AsyncInitVal {0} CONFIG.SyncInitVal {0} CONFIG.ShiftRegType {Fixed_Length} CONFIG.CE {true} CONFIG.SSET {false} CONFIG.SCLR {false} CONFIG.SINIT {false}] [get_bd_cells ap_done_reg_$x]
 
  connect_bd_net [get_bd_pins ap_done_reg_$x/CLK] [get_bd_ports aclk]
  connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_done_reg_$x/D]
  connect_bd_net [get_bd_pins /fcuda_core_$x/ap_done] [get_bd_pins ap_done_reg_$x/CE]

  create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 ap_done_and_$x
  set_property -dict [list CONFIG.C_SIZE {1} CONFIG.C_OPERATION {and}] [get_bd_cells ap_done_and_$x]

  connect_bd_net [get_bd_pins ap_done_reg_$x/Q] [get_bd_pins ap_done_and_$x/Op1]
  if {$x == 0} {
    connect_bd_net [get_bd_pins constant_one/dout] [get_bd_pins ap_done_and_$x/Op2]
  } else {
    set previous_reg [expr $x - 1]
    connect_bd_net [get_bd_pins ap_done_and_${previous_reg}/Res] [get_bd_pins ap_done_and_$x/Op2]
  }

# core address
  set_property -dict [list CONFIG.C_M_AXI_MEMPORT_P0_TARGET_ADDR {0x00000000}] [get_bd_cells fcuda_core_$x]
}

set final_reg [expr ${total_num_cores} - 1]
connect_bd_net [get_bd_pins ap_ready_and_${final_reg}/Res] [get_bd_ports ap_ready]
connect_bd_net [get_bd_pins ap_idle_and_${final_reg}/Res] [get_bd_ports ap_idle]
connect_bd_net [get_bd_pins ap_done_and_${final_reg}/Res] [get_bd_ports ap_done]

save_bd_design

# address editor
assign_bd_address [get_bd_addr_segs {mig_7series_0/memmap/memaddr }]

# generate output
generate_target all [get_files  $prj_path/${project_name}.srcs/sources_1/bd/design_1/design_1.bd] 

# make wrapper
make_wrapper -files [get_files $prj_path/${project_name}.srcs/sources_1/bd/design_1/design_1.bd] -top
import_files -force -norecurse $prj_path/${project_name}.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.v
update_compile_order -fileset sources_1
update_compile_order -fileset sources_1
update_compile_order -fileset sim_1

save_bd_design
}

if {$sim_flow == 1} {

    add_files -fileset sim_1 -norecurse -scan_for_includes $ppFile_path/ddr3_model_parameters.vh
    import_files -fileset sim_1 -norecurse $ppFile_path/ddr3_model_parameters.vh

    add_files -fileset sim_1 -norecurse -scan_for_includes $ppFile_path/ddr3_model.v 
    add_files -fileset sim_1 -norecurse -scan_for_includes $ppFile_path/wiredly.v

    import_files -fileset sim_1 -norecurse $ppFile_path/ddr3_model.v 
    import_files -fileset sim_1 -norecurse $ppFile_path/wiredly.v

    add_files -fileset sim_1 -norecurse -scan_for_includes $ppFile_path/sim_tb_top.v
    import_files -fileset sim_1 -force -norecurse $ppFile_path/sim_tb_top.v

    update_compile_order -fileset sim_1

    update_compile_order -fileset sim_1
    save_bd_design
    launch_simulation
    #Vivado 2014.2 command
    #launch_xsim -simset sim_1 -mode behavioral
    run all
}

if {$syn_flow == 1} {
    set_property top design_1_wrapper [current_fileset]
    update_compile_order -fileset sources_1
    reset_run synth_1
    launch_runs impl_1
    wait_on_run synth_1
    wait_on_run impl_1                      

    open_run synth_1
    report_utilization -file $rptDir/post_synthesize_util.rpt

    open_run impl_1
    report_utilization -file $rptDir/post_opt_util.rpt
    report_utilization -file $rptDir/post_place_no_packthru_report.rpt
    report_utilization -packthru -file $rptDir/post_place_packthru_report.rpt
    report_utilization -packthru -file $rptDir/post_route_report.rpt
    report_power -file $rptDir/power_report.rpt
    report_utilization -file $rptDir/post_route_util.rpt
    report_timing_summary -file $rptDir/post_route_timing_summary.rpt
    report_timing -file $rptDir/post_route_timing.rpt
    exit
}
