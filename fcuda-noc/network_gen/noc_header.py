################################################################################
##    FCUDA
##    Copyright (c) <2016>
##    <University of Illinois at Urbana-Champaign>
##    <University of California at Los Angeles>
##    All rights reserved.
##
##    Developed by:
##
##        <ES CAD Group & IMPACT Research Group>
##            <University of Illinois at Urbana-Champaign>
##            <http://dchen.ece.illinois.edu/>
##            <http://impact.crhc.illinois.edu/>
##
##        <VAST Laboratory>
##            <University of California at Los Angeles>
##            <http://vast.cs.ucla.edu/>
##
##        <Hardware Research Group>
##            <Advanced Digital Sciences Center>
##            <http://adsc.illinois.edu/>
################################################################################

#!/usr/bin/python

import collections
import math

def comment(n):
  print "// " + n

def include(n):
  print "`include " + n


comment ("File auto-generated by research/scripts/gen/noc_header.py")

comment ("")

comment("format of a word is:")
comment("[SENDOKBIT][SENDBIT][NEXTHOP][LASTBIT][DEST][SRC][TYPE][DATA]")
comment("")
comment("Semantics of inputs:")
comment("SENDOKBIT     - router has free space in FIFOs (used for flow control)")
comment("SENDBIT       - packet is valid")
comment("NEXTHOP       - next hop at NEXT ROUTER (e.g., it's the 'next next hop'):")
comment("one hot encoded")
comment("LASTBIT       - signifies that packet of length >0 has ended")
comment("DEST_ADDRESS  - destnation address of packet")
comment("SRC_ADDRESS   - src address of packet")
comment("TYPE          - packet type")
comment("DATA          - pkt payload")
comment("- EXPANDED s.t. data == 64 bits")
comment("top 32        = data")
comment("bottom 32     = address")

include("macros.vh")
print

default = [
    # enable or disable directory system
    ('ENABLE_DIRECTORIES'            , 1)                                                                     ,

    # number of inputs per router
    ('NUM_INPUTS'                    , 5)                                                                     ,
    ('NUM_PORTS'                     , 'NUM_INPUTS')                                                          ,

    # number of nodes in the system
    ('NUM_COMPUTE_NODES'             , 12)                                                                    ,

    # configured fifo size
    ('FIFO_WIDTH'                    , 4)                                                                     ,
    ('FIFO_SIZE'                     , '1 << `FIFO_WIDTH')                                                    ,

    # total width of data portion of NoC packet. A packet consists of addr + data (needed for writes right now)
    ('DATA_DATAWIDTH'                , 64)                                                                    ,

    # address width
    ('DATA_AWIDTH'                   , 32)                                                                    ,

    # data width
    ('DATA_DWIDTH'                   , 32)                                                                    ,

    # width of nexthop: ((number of inputs) - 1)
    ('NEXTHOPWIDTH'                  , '(`NUM_INPUTS - 1)')                                                   ,   # FIXME?

    ('MAX_NUM_NODES'                 , '32')                                                                  ,   # FIXME?

    # width of dest = log2(max # items in system)
    ('DESTWIDTH'                     , int(math.log(32, 2)))                                                            ,   # FIXME == 5

    # width of packet type
    ('DATA_TYPEWIDTH'                , 7)                                                                     ,
    ('TYPEWIDTH'                     , '`DATA_TYPEWIDTH')                                                     ,

    # width of pkt SRC == width of pkt DEST
    ('DATA_SRCWIDTH'                 , '`DESTWIDTH')                                                          ,
    ('SRCWIDTH'                      , '`DESTWIDTH')                                                          ,

    # offset of addr / data within packet
    ('DATA_A_OFFSET'                 , 0)                                                                     ,
    ('DATA_D_OFFSET'                 , '(`DATA_AWIDTH + `DATA_A_OFFSET)')                                     ,

    # total width of ctrl part of pket
    ('CTRLWIDTH'                     , '(`DESTWIDTH + 1 + `NEXTHOPWIDTH + 1 + 1)')                            ,

    # total width of data part of pkt
    ('DATAWIDTH'                     , '(`DATA_DATAWIDTH + `DATA_TYPEWIDTH + `DATA_SRCWIDTH)')                ,

    # total width of a packet
    ('IO_WIDTH'                      , '(`DATAWIDTH + `CTRLWIDTH)')                                           ,

    # width of route for NEXTHOP
    ('ROUTE_WIRE_WIDTH'              , '(1 << `DESTWIDTH ) ')                                                 ,

    # aggregate widths
    ('TOTAL_PKT_TYPE_WIDTH'          , '(`DATA_TYPEWIDTH * `NUM_INPUTS)')                                     ,
    ('TOTAL_SRC_ADDR_WIDTH'          , '(`DATA_SRCWIDTH * `NUM_INPUTS)')                                      ,
    ('TOTAL_WIDTH'                   , '(`NUM_INPUTS * `IO_WIDTH)')                                           ,
    ('ALL_ROUTE_BITS'                , '(`NUM_INPUTS * `NEXTHOPWIDTH * `ROUTE_WIRE_WIDTH)')                   ,
    ('DIR_READEN_WIDTH'              , '(`NUM_INPUTS)')                                                       ,
    ('TOTAL_RESULT_SIZE'             , '(`DESTWIDTH * `NUM_INPUTS)')                                          ,

    # offsets to various bits, fields
    ('LASTBIT'                       , '(`DESTWIDTH)')                                                        ,
    ('NEXTHOPBIT'                    , '  (`LASTBIT + 1)')                                                    ,
    ('SENDBIT'                       , '(`DESTWIDTH + 1 + `NEXTHOPWIDTH)')                                    ,
    ('SENDOKBIT'                     , '(`DESTWIDTH + 1 + `NEXTHOPWIDTH + 1)')                                ,
    ('TYPE_OFFSET'                   , '(`DATA_DATAWIDTH)')                                                   ,
    ('SRC_OFFSET'                    , '(`TYPE_OFFSET + `DATA_TYPEWIDTH)')                                    ,
    ('DATA_OFFSET'                   , 0)                                                                     ,
    ('DEST_OFFSET'                   , '(`DATAWIDTH)')                                                        ,
    ('LASTBIT_OFFSET'                , '(`DEST_OFFSET + `DESTWIDTH)')                                         ,
    ('NEXTHOP_OFFSET'                , '(`LASTBIT_OFFSET + 1)')                                               ,
    ('SENDBIT_OFFSET'                , '(`NEXTHOP_OFFSET + `NEXTHOPWIDTH)')                                   ,
    ('SENDOKBIT_OFFSET'              , '( `SENDBIT_OFFSET + 1)')                                              ,

    # packet types
    ('TYPE_REQUEST'                  , "7'b0000000")                                                          ,
    ('TYPE_RESPONSE_ADDR'            , "7'b0000001")                                                          ,
    ('TYPE_RESPONSE_DATA'            , "7'b0000010")                                                          ,
    ('TYPE_C_REQ'                    , "7'b0000011")                                                          ,
    ('TYPE_WRITE'                    , "7'b0000100")                                                          ,

    # FIXME -- widths for directories / etc
    ('OFFSET_WIDTH'                  , 4)                                                                     ,
    ('ROUTER_ID_WIDTH'               , 2)                                                                     ,
    ('INDEX_WIDTH'                   , 7)                                                                     ,
    ('TAG_WIDTH'                     , '(`DATA_DATAWIDTH - `OFFSET_WIDTH - `ROUTER_ID_WIDTH - `INDEX_WIDTH)') ,

    ('OFFSET_LOW'                    , 0)                                                                     ,
    ('ROUTER_ID_LOW'                 , '(`OFFSET_WIDTH)')                                                     ,
    ('INDEX_LOW'                     , ' (`ROUTER_ID_LOW + `ROUTER_ID_WIDTH)')                                ,
    ('TAG_LOW'                       , '(`INDEX_LOW + `INDEX_WIDTH)')                                         ,

    ('TOTAL_ROUTER_ID_WIDTH'         , '(`ROUTER_ID_WIDTH * `NUM_INPUTS)')                                    ,
    ('TOTAL_INDEX_WIDTH'             , '(`INDEX_WIDTH * `NUM_INPUTS)')                                        ,
    ('TOTAL_TAG_WIDTH'               , '(`NUM_INPUTS * `TAG_WIDTH)')                                          ,

    # FIXME -- directory params
    ('DIRECTORY_SIZE'                , 512)                                                                   ,
    ('DIR_ENTRY_SIZE'                , 32)                                                                    ,
    ('LOG_NUM_PORTS'                 , 3)                                                                     ,

    # FIXME -- number of BRAMs per core
    ('NUM_BRAMS'                     , 3)                                                                     ,

    # parameters of BRAM - FIXME
    ('BRAM_TAG_DATAWIDTH_PLUS_VALID' , 21)                                                                    ,
    ('BRAM_TAG_DATAWIDTH'            , 20)                                                                    ,
    ('BRAM_TAG_ADDRWIDTH'            , 10)                                                                    ,

    ('BRAM_DATA_DATAWIDTH'           , 32)                                                                    ,
    ('BRAM_DATA_ADDRWIDTH'           , 10)
]








comment("""///////////////////////////////////////////////////////////////////////////////
// System Configuration
///////////////////////////////////////////////////////////////////////////////""")

for item in default:
  print "`define " + str(item[0]) + " " +  str(item[1])
