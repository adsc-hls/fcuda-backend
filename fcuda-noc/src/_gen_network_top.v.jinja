// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1 ns / 1 ps
module gen_network_top (
m_axi_memport_p0_AWID,
m_axi_memport_p0_AWADDR,
m_axi_memport_p0_AWLEN,
m_axi_memport_p0_AWSIZE,
m_axi_memport_p0_AWBURST,
m_axi_memport_p0_AWLOCK,
m_axi_memport_p0_AWCACHE,
m_axi_memport_p0_AWPROT,
m_axi_memport_p0_AWQOS,
m_axi_memport_p0_AWUSER,
m_axi_memport_p0_AWVALID,
m_axi_memport_p0_AWREADY,
m_axi_memport_p0_WDATA,
m_axi_memport_p0_WSTRB,
m_axi_memport_p0_WLAST,
m_axi_memport_p0_WUSER,
m_axi_memport_p0_WVALID,
m_axi_memport_p0_WREADY,
m_axi_memport_p0_BID,
m_axi_memport_p0_BRESP,
m_axi_memport_p0_BUSER,
m_axi_memport_p0_BVALID,
m_axi_memport_p0_BREADY,
m_axi_memport_p0_ARID,
m_axi_memport_p0_ARADDR,
m_axi_memport_p0_ARLEN,
m_axi_memport_p0_ARSIZE,
m_axi_memport_p0_ARBURST,
m_axi_memport_p0_ARLOCK,
m_axi_memport_p0_ARCACHE,
m_axi_memport_p0_ARPROT,
m_axi_memport_p0_ARQOS,
m_axi_memport_p0_ARUSER,
m_axi_memport_p0_ARVALID,
m_axi_memport_p0_ARREADY,
m_axi_memport_p0_RID,
m_axi_memport_p0_RDATA,
m_axi_memport_p0_RRESP,
m_axi_memport_p0_RLAST,
m_axi_memport_p0_RUSER,
m_axi_memport_p0_RVALID,
m_axi_memport_p0_RREADY,
aresetn,
aclk,

{%- for x in scalar_ports %}
{{x.name}},
{%- endfor %}

ap_start,
ap_ready,
ap_done,
ap_idle
);

parameter C_M_AXI_MEMPORT_P0_ID_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_ADDR_WIDTH = 32;
parameter C_M_AXI_MEMPORT_P0_DATA_WIDTH = 32;
parameter C_M_AXI_MEMPORT_P0_AWUSER_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_ARUSER_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_WUSER_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_RUSER_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_BUSER_WIDTH = 1;
parameter C_M_AXI_MEMPORT_P0_USER_DATA_WIDTH = 32;
parameter C_M_AXI_MEMPORT_P0_TARGET_ADDR = 32'h00000000;
parameter C_M_AXI_MEMPORT_P0_USER_VALUE = 1'b0;
parameter C_M_AXI_MEMPORT_P0_PROT_VALUE = 3'b010;
parameter C_M_AXI_MEMPORT_P0_CACHE_VALUE = 4'b0000;
parameter RESET_ACTIVE_LOW = 1;

output [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_AWID ;
output [C_M_AXI_MEMPORT_P0_ADDR_WIDTH - 1:0] m_axi_memport_p0_AWADDR ;
output [8 - 1:0] m_axi_memport_p0_AWLEN ;
output [3 - 1:0] m_axi_memport_p0_AWSIZE ;
output [2 - 1:0] m_axi_memport_p0_AWBURST ;
output [2 - 1:0] m_axi_memport_p0_AWLOCK ;
output [4 - 1:0] m_axi_memport_p0_AWCACHE ;
output [3 - 1:0] m_axi_memport_p0_AWPROT ;
output [4 - 1:0] m_axi_memport_p0_AWQOS ;
output [C_M_AXI_MEMPORT_P0_AWUSER_WIDTH - 1:0] m_axi_memport_p0_AWUSER ;
output m_axi_memport_p0_AWVALID ;
input m_axi_memport_p0_AWREADY ;
output [C_M_AXI_MEMPORT_P0_DATA_WIDTH - 1:0] m_axi_memport_p0_WDATA ;
output [C_M_AXI_MEMPORT_P0_DATA_WIDTH/8 - 1:0] m_axi_memport_p0_WSTRB ;
output m_axi_memport_p0_WLAST ;
output [C_M_AXI_MEMPORT_P0_WUSER_WIDTH - 1:0] m_axi_memport_p0_WUSER ;
output m_axi_memport_p0_WVALID ;
input m_axi_memport_p0_WREADY ;
input [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_BID ;
input [2 - 1:0] m_axi_memport_p0_BRESP ;
input [C_M_AXI_MEMPORT_P0_BUSER_WIDTH - 1:0] m_axi_memport_p0_BUSER ;
input m_axi_memport_p0_BVALID ;
output m_axi_memport_p0_BREADY ;
output [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_ARID ;
output [C_M_AXI_MEMPORT_P0_ADDR_WIDTH - 1:0] m_axi_memport_p0_ARADDR ;
output [8 - 1:0] m_axi_memport_p0_ARLEN ;
output [3 - 1:0] m_axi_memport_p0_ARSIZE ;
output [2 - 1:0] m_axi_memport_p0_ARBURST ;
output [2 - 1:0] m_axi_memport_p0_ARLOCK ;
output [4 - 1:0] m_axi_memport_p0_ARCACHE ;
output [3 - 1:0] m_axi_memport_p0_ARPROT ;
output [4 - 1:0] m_axi_memport_p0_ARQOS ;
output [C_M_AXI_MEMPORT_P0_ARUSER_WIDTH - 1:0] m_axi_memport_p0_ARUSER ;
output m_axi_memport_p0_ARVALID ;
input m_axi_memport_p0_ARREADY ;
input [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_RID ;
input [C_M_AXI_MEMPORT_P0_DATA_WIDTH - 1:0] m_axi_memport_p0_RDATA ;
input [2 - 1:0] m_axi_memport_p0_RRESP ;
input m_axi_memport_p0_RLAST ;
input [C_M_AXI_MEMPORT_P0_RUSER_WIDTH - 1:0] m_axi_memport_p0_RUSER ;
input m_axi_memport_p0_RVALID ;
output m_axi_memport_p0_RREADY ;

input aresetn ;

input aclk ;

//Scalar ports
{%- for x in scalar_ports %}
input wire [{{(x.width - 1)}} : 0] {{x.name}};
{%- endfor %}

input ap_start ;
output ap_ready ;
output ap_done ;
output ap_idle ;

wire [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_AWID;
wire [C_M_AXI_MEMPORT_P0_ADDR_WIDTH - 1:0] m_axi_memport_p0_AWADDR;
wire [8 - 1:0] m_axi_memport_p0_AWLEN;
wire [3 - 1:0] m_axi_memport_p0_AWSIZE;
wire [2 - 1:0] m_axi_memport_p0_AWBURST;
wire [2 - 1:0] m_axi_memport_p0_AWLOCK;
wire [4 - 1:0] m_axi_memport_p0_AWCACHE;
wire [3 - 1:0] m_axi_memport_p0_AWPROT;
wire [4 - 1:0] m_axi_memport_p0_AWQOS;
wire [C_M_AXI_MEMPORT_P0_AWUSER_WIDTH - 1:0] m_axi_memport_p0_AWUSER;
wire m_axi_memport_p0_AWVALID;
wire m_axi_memport_p0_AWREADY;
wire [C_M_AXI_MEMPORT_P0_DATA_WIDTH - 1:0] m_axi_memport_p0_WDATA;
wire [C_M_AXI_MEMPORT_P0_DATA_WIDTH/8 - 1:0] m_axi_memport_p0_WSTRB;
wire m_axi_memport_p0_WLAST;
wire [C_M_AXI_MEMPORT_P0_WUSER_WIDTH - 1:0] m_axi_memport_p0_WUSER;
wire m_axi_memport_p0_WVALID;
wire m_axi_memport_p0_WREADY;
wire [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_BID;
wire [2 - 1:0] m_axi_memport_p0_BRESP;
wire [C_M_AXI_MEMPORT_P0_BUSER_WIDTH - 1:0] m_axi_memport_p0_BUSER;
wire m_axi_memport_p0_BVALID;
wire m_axi_memport_p0_BREADY;
wire [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_ARID;
wire [C_M_AXI_MEMPORT_P0_ADDR_WIDTH - 1:0] m_axi_memport_p0_ARADDR;
wire [8 - 1:0] m_axi_memport_p0_ARLEN;
wire [3 - 1:0] m_axi_memport_p0_ARSIZE;
wire [2 - 1:0] m_axi_memport_p0_ARBURST;
wire [2 - 1:0] m_axi_memport_p0_ARLOCK;
wire [4 - 1:0] m_axi_memport_p0_ARCACHE;
wire [3 - 1:0] m_axi_memport_p0_ARPROT;
wire [4 - 1:0] m_axi_memport_p0_ARQOS;
wire [C_M_AXI_MEMPORT_P0_ARUSER_WIDTH - 1:0] m_axi_memport_p0_ARUSER;
wire m_axi_memport_p0_ARVALID;
wire m_axi_memport_p0_ARREADY;
wire [C_M_AXI_MEMPORT_P0_ID_WIDTH - 1:0] m_axi_memport_p0_RID;
wire [C_M_AXI_MEMPORT_P0_DATA_WIDTH - 1:0] m_axi_memport_p0_RDATA;
wire [2 - 1:0] m_axi_memport_p0_RRESP;
wire m_axi_memport_p0_RLAST;
wire [C_M_AXI_MEMPORT_P0_RUSER_WIDTH - 1:0] m_axi_memport_p0_RUSER;
wire m_axi_memport_p0_RVALID;
wire m_axi_memport_p0_RREADY;

wire aresetn;


wire [32 - 1:0] sig_gen_network_memport_p0_datain;
wire [32 - 1:0] sig_gen_network_memport_p0_dataout;
wire [32 - 1:0] sig_gen_network_memport_p0_address;
wire [32 - 1:0] sig_gen_network_memport_p0_size;
wire sig_gen_network_memport_p0_req_din;
wire sig_gen_network_memport_p0_req_full_n;
wire sig_gen_network_memport_p0_req_write;
wire sig_gen_network_memport_p0_rsp_empty_n;
wire sig_gen_network_memport_p0_rsp_read;

wire sig_gen_network_ap_rst;



gen_network gen_network_U(
    .mem_datain(sig_gen_network_memport_p0_datain),
    .mem_dataout(sig_gen_network_memport_p0_dataout),
    .mem_address(sig_gen_network_memport_p0_address),
    .mem_size(sig_gen_network_memport_p0_size),
    .mem_req_din(sig_gen_network_memport_p0_req_din),
    .mem_req_full_n(sig_gen_network_memport_p0_req_full_n),
    .mem_req_write(sig_gen_network_memport_p0_req_write),
    .mem_rsp_empty_n(sig_gen_network_memport_p0_rsp_empty_n),
    .mem_rsp_read(sig_gen_network_memport_p0_rsp_read),
    .ap_rst(sig_gen_network_ap_rst),
    .ap_clk(aclk),

    {%- for x in scalar_ports %}
    .{{x.name}}({{x.name}}),
    {%- endfor %}

    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

gen_network_memport_p0_if #(
    .C_ID_WIDTH(C_M_AXI_MEMPORT_P0_ID_WIDTH),
    .C_ADDR_WIDTH(C_M_AXI_MEMPORT_P0_ADDR_WIDTH),
    .C_DATA_WIDTH(C_M_AXI_MEMPORT_P0_DATA_WIDTH),
    .C_AWUSER_WIDTH(C_M_AXI_MEMPORT_P0_AWUSER_WIDTH),
    .C_ARUSER_WIDTH(C_M_AXI_MEMPORT_P0_ARUSER_WIDTH),
    .C_WUSER_WIDTH(C_M_AXI_MEMPORT_P0_WUSER_WIDTH),
    .C_RUSER_WIDTH(C_M_AXI_MEMPORT_P0_RUSER_WIDTH),
    .C_BUSER_WIDTH(C_M_AXI_MEMPORT_P0_BUSER_WIDTH),
    .C_USER_DATA_WIDTH(C_M_AXI_MEMPORT_P0_USER_DATA_WIDTH),
    .C_TARGET_ADDR(C_M_AXI_MEMPORT_P0_TARGET_ADDR),
    .C_USER_VALUE(C_M_AXI_MEMPORT_P0_USER_VALUE),
    .C_PROT_VALUE(C_M_AXI_MEMPORT_P0_PROT_VALUE),
    .C_CACHE_VALUE(C_M_AXI_MEMPORT_P0_CACHE_VALUE))
gen_network_memport_p0_if_U(
    .ACLK(aclk),
    .ARESETN(aresetn),
    .USER_datain(sig_gen_network_memport_p0_datain),
    .USER_dataout(sig_gen_network_memport_p0_dataout),
    .USER_address(sig_gen_network_memport_p0_address),
    .USER_size(sig_gen_network_memport_p0_size),
    .USER_req_din(sig_gen_network_memport_p0_req_din),
    .USER_req_full_n(sig_gen_network_memport_p0_req_full_n),
    .USER_req_write(sig_gen_network_memport_p0_req_write),
    .USER_rsp_empty_n(sig_gen_network_memport_p0_rsp_empty_n),
    .USER_rsp_read(sig_gen_network_memport_p0_rsp_read),
    .AWID(m_axi_memport_p0_AWID),
    .AWADDR(m_axi_memport_p0_AWADDR),
    .AWLEN(m_axi_memport_p0_AWLEN),
    .AWSIZE(m_axi_memport_p0_AWSIZE),
    .AWBURST(m_axi_memport_p0_AWBURST),
    .AWLOCK(m_axi_memport_p0_AWLOCK),
    .AWCACHE(m_axi_memport_p0_AWCACHE),
    .AWPROT(m_axi_memport_p0_AWPROT),
    .AWQOS(m_axi_memport_p0_AWQOS),
    .AWUSER(m_axi_memport_p0_AWUSER),
    .AWVALID(m_axi_memport_p0_AWVALID),
    .AWREADY(m_axi_memport_p0_AWREADY),
    .WDATA(m_axi_memport_p0_WDATA),
    .WSTRB(m_axi_memport_p0_WSTRB),
    .WLAST(m_axi_memport_p0_WLAST),
    .WUSER(m_axi_memport_p0_WUSER),
    .WVALID(m_axi_memport_p0_WVALID),
    .WREADY(m_axi_memport_p0_WREADY),
    .BID(m_axi_memport_p0_BID),
    .BRESP(m_axi_memport_p0_BRESP),
    .BUSER(m_axi_memport_p0_BUSER),
    .BVALID(m_axi_memport_p0_BVALID),
    .BREADY(m_axi_memport_p0_BREADY),
    .ARID(m_axi_memport_p0_ARID),
    .ARADDR(m_axi_memport_p0_ARADDR),
    .ARLEN(m_axi_memport_p0_ARLEN),
    .ARSIZE(m_axi_memport_p0_ARSIZE),
    .ARBURST(m_axi_memport_p0_ARBURST),
    .ARLOCK(m_axi_memport_p0_ARLOCK),
    .ARCACHE(m_axi_memport_p0_ARCACHE),
    .ARPROT(m_axi_memport_p0_ARPROT),
    .ARQOS(m_axi_memport_p0_ARQOS),
    .ARUSER(m_axi_memport_p0_ARUSER),
    .ARVALID(m_axi_memport_p0_ARVALID),
    .ARREADY(m_axi_memport_p0_ARREADY),
    .RID(m_axi_memport_p0_RID),
    .RDATA(m_axi_memport_p0_RDATA),
    .RRESP(m_axi_memport_p0_RRESP),
    .RLAST(m_axi_memport_p0_RLAST),
    .RUSER(m_axi_memport_p0_RUSER),
    .RVALID(m_axi_memport_p0_RVALID),
    .RREADY(m_axi_memport_p0_RREADY));

gen_network_ap_rst_if #(
    .RESET_ACTIVE_LOW(RESET_ACTIVE_LOW))
ap_rst_if_U(
    .dout(sig_gen_network_ap_rst),
    .din(aresetn));

endmodule
